function referenceFluxes = getIncomingFluxes(modelSamplingWT, mt_i, codesLM, pFBA_sol)
%##########################################################################
%
% This function computes the sum of incoming fluxes for the mutants that
% were classified as outliers.
%
%##########################################################################

% find lipid species associated to mutated gene:
idxRxns = find(contains(modelSamplingWT.grRules, mt_i));

switch mt_i
    case {'AT1G13580'}
        % for this gene add three more reactions:
        idCSRxns = find(ismember(modelSamplingWT.rxns, {'CS_r1';'CS_r11';'CS_r21'}));
        idxRxns = [idxRxns;idCSRxns];
end


% get list of lipid metabolites produced and consumed by each reaction:
listProducts = cell(numel(idxRxns)*10,2);
listReactants = cell(numel(idxRxns)*10,2);
countP = 1;
countR = 1;
for i = 1:numel(idxRxns)
    % get index of products generated by reaction:
    idxProducts_rxni = modelSamplingWT.S(:,idxRxns(i))>0;
    
    % get index of reactants consumed by reaction:
    idxReactants_rxni = modelSamplingWT.S(:,idxRxns(i))<0;
    
    % get abbreviation and description for metabolic products:
    abbPdcts_rxni = modelSamplingWT.mets(idxProducts_rxni);
    namePdcts_rxnj = modelSamplingWT.metNames(idxProducts_rxni);

    % get abbreviation and description for reactants:
    abbRcts_rxni = modelSamplingWT.mets(idxReactants_rxni);
    nameRcts_rxnj = modelSamplingWT.metNames(idxReactants_rxni);
    
    
    % carry-out adjustments to names when necessary:
    switch mt_i
        case {'AT5G14180', 'AT4G18550'}
            namePdcts_rxnj = strrep(namePdcts_rxnj, 'FA ', 'FA(');
            
        case {'AT1G02390','AT1G06520'}
            nameRcts_rxnj = strrep(nameRcts_rxnj, '[acyl-carrier-protein]]', '[acyl-carrier-protein))');
            nameRcts_rxnj = strrep(nameRcts_rxnj, 'acp [', 'acp (');
            nameRcts_rxnj = strrep(nameRcts_rxnj, '16:0-acp (', 'FA_ACP(');
            nameRcts_rxnj = strrep(nameRcts_rxnj, '18:0-acp (', 'FA_ACP(');
            
        case {'AT1G54570'}
            idxACP_FAs = contains(nameRcts_rxnj, '[FA0706]');
            nameRcts_rxnj(idxACP_FAs) = {'[FA0706] FA_ACP()'};
            
            idxCoA_FAs = contains(nameRcts_rxnj, '[FA0705]');
            nameRcts_rxnj(idxCoA_FAs) = {'[FA0705] FA_CoA()'};
            
        case {'AT5G15530'}
            idxCoA_FAs = contains(nameRcts_rxnj, '[FA0705]');
            nameRcts_rxnj(idxCoA_FAs) = {'[FA0705] FA_CoA()'};
            
            idxMCoA_FAs = contains(namePdcts_rxnj, '[FA0705]');
            namePdcts_rxnj(idxMCoA_FAs) = {'[FA0705] M_CoA()'};
            
        case {'AT3G51520', 'AT4G00400', 'AT2G19450', 'AT3G18850', 'AT1G51260', 'AT1G75020', 'AT1G01610'}
            idxCoA_FAs = contains(nameRcts_rxnj, '[FA0705]');
            nameRcts_rxnj(idxCoA_FAs) = {'[FA0705] FA_CoA()'};
            
        case {'AT2G39290'}
            nameRcts_rxnj = strrep(nameRcts_rxnj, 'CDP-DG', 'CDP_DG');
            
        case {'AT4G22340'}
            namePdcts_rxnj = strrep(namePdcts_rxnj, 'CDP-DG', 'CDP_DG');
            
        case {'AT5G23670','AT5G19200','AT1G13580'}
            idxP_SPBs = contains(namePdcts_rxnj, '[SP0102]');
            namePdcts_rxnj(idxP_SPBs) = {'[SP0102] dSP()'};
            
            idxP2_SPBs = contains(namePdcts_rxnj, '[SP0201]');
            namePdcts_rxnj(idxP2_SPBs) = {'[SP0201] dCer18_1()'};
            
            idxP_Cer = contains(namePdcts_rxnj, '[SP0203]');
            namePdcts_rxnj(idxP_Cer) = {'[SP0203] tCer()'};
            
            idxP2_Cer = contains(namePdcts_rxnj, '[SP0202]');
            namePdcts_rxnj(idxP2_Cer) = {'[SP0202] dCer()'};
            
            idxR_SPBs = contains(nameRcts_rxnj, '[SP0102]');
            nameRcts_rxnj(idxR_SPBs) = {'[SP0102] dSPB()'};
            
            idxCoA_FAs = contains(nameRcts_rxnj, '[FA0705]');
            nameRcts_rxnj(idxCoA_FAs) = {'[FA0705] FA_CoA()'};
            
            idxR2_SPBs = contains(nameRcts_rxnj, '[SP0103]');
            nameRcts_rxnj(idxR2_SPBs) = {'[SP0103] tSPB()'};
            
        case {'AT4G33030'} % here a fake LM code was created for sulfoquinovose
            idx_SQNV = contains(namePdcts_rxnj, 'UDP-6-sulfoquinovose');
            namePdcts_rxnj(idx_SQNV) = {'[UDP-SQNV] SQNV()'};
            
        case {'AT4G23850','AT1G77590'}
            idx_FFAs = contains(nameRcts_rxnj, '[FA0101]');
            nameRcts_rxnj(idx_FFAs) = {'[FA0101] FFA()'};
            
            idxCoA_FAs = contains(namePdcts_rxnj, '[FA0705]');
            namePdcts_rxnj(idxCoA_FAs) = {'[FA0705] FA_CoA()'};
            
        case {'AT5G16230','AT2G43710','AT3G02610','AT2G05990'}
            idxACPR_FAs = contains(nameRcts_rxnj, '[FA0706]');
            nameRcts_rxnj(idxACPR_FAs) = {'[FA0706] FA_ACP()'};
            
            idxACPP_FAs = contains(namePdcts_rxnj, '[FA0706]');
            namePdcts_rxnj(idxACPP_FAs) = {'[FA0706] FA_ACP()'};
            
        case {'AT1G73600','AT1G74320'}
            idxMEthP = contains(namePdcts_rxnj, 'N-Methylethanolamine phosphate');
            namePdcts_rxnj(idxMEthP) = {'[NMEthP] NMEthP()'};
            
            idxDMEthP = contains(namePdcts_rxnj, 'Phosphodimethylethanolamine');
            namePdcts_rxnj(idxDMEthP) = {'[DMEthP] DMEthP()'};
            
            idxChoP = contains(namePdcts_rxnj, 'Choline phosphate');
            namePdcts_rxnj(idxChoP) = {'[ChoP] ChoP()'};
            
        case {'AT3G07690'}
            idxG3P = contains(namePdcts_rxnj, 'sn-Glycerol 3-phosphate');
            namePdcts_rxnj(idxG3P) = {'[G3P] G3P()'};
            
        case {'AT1G13560'}
            % here exclude from products any metabolite different from PC
            idxPE = contains(namePdcts_rxnj, '[GP0201]');
            namePdcts_rxnj(idxPE) = {'[xx] PE()'};
    end
    
    
    % now get the indexes for reactions:
    switch mt_i
        case {'AT1G52760'} % if locus is 'AT1G52760' don´t use LM codes
            % here try constraining downstream mets, that is alkyl ferulates
            % this is the list of downstream mets produced from feruloyl
            % (these are produced by rxns catalyzed by AT3G48720 product:
            abbPdcts_rxni = {'F-C16_0-10-16diOH[c]','F-C16_0-DCA[c]', 'F-C18_0-DCA[c]','F-C18_1-DCA[c]','F-C18_2-DCA[c]','F-C18-triOH[c]'};
            idxHitsPdcts = ismember(modelSamplingWT.mets, abbPdcts_rxni);
            
            % here is necessary to add a fake LM code and create new name:
            fakeLM = {'[FA0705] alkyl_ferulate()'};
            namePdcts_rxnj = repmat(fakeLM, sum(idxHitsPdcts), 1);
            idxHitsPdcts = true(sum(idxHitsPdcts), 1);
            
            % here are the precursors required by rxns catalyzed by AT3G48720 product:
            abbRcts_rxni = {'C16_0-10-16diOH[c]','C16_0-DCA[c]','C18_0-DCA[c]','C18_1-DCA[c]','C18_2-DCA[c]','C18-triOH[c]'};
            idxHitsRcts = ismember(modelSamplingWT.mets, abbRcts_rxni);
            
            % create here also a fake name:
            fakeRcts = {'[FA0117] FA_OHs()'}; 
            nameRcts_rxnj = repmat(fakeRcts, sum(idxHitsRcts),1);
            idxHitsRcts = true(sum(idxHitsRcts), 1);
            
        
        otherwise % for the other locus use LM codes to check if any of the mets is a lipid:
            pdctsCodes = repmat({'NA'},numel(namePdcts_rxnj),1);
            for j = 1:numel(namePdcts_rxnj)
                codePdct_j = extractBetween(namePdcts_rxnj{j}, '[', ']');
                if ~isempty(codePdct_j)
                    pdctsCodes{j} = codePdct_j;
                end
            end
            pdctsCodes = cellstr(string(pdctsCodes));
            idxHitsPdcts = ismember(pdctsCodes, codesLM);
            
            
            rctsCodes = repmat({'NA'},numel(nameRcts_rxnj),1);
            for j = 1:numel(nameRcts_rxnj)
                codeRct_j = extractBetween(nameRcts_rxnj{j}, '[', ']');
                if ~isempty(codeRct_j)
                    rctsCodes{j} = codeRct_j;
                end
            end
            rctsCodes = cellstr(string(rctsCodes));
            idxHitsRcts = ismember(rctsCodes, codesLM);     
    end
    
    abbPdcts_rxni = abbPdcts_rxni(idxHitsPdcts);
    listProducts(countP:(countP+numel(abbPdcts_rxni))-1,1) = abbPdcts_rxni;
    listProducts(countP:(countP+numel(abbPdcts_rxni))-1,2) = namePdcts_rxnj(idxHitsPdcts);
    countP = countP+numel(abbPdcts_rxni);
    
    abbRcts_rxni = abbRcts_rxni(idxHitsRcts);
    listReactants(countR:(countR+numel(abbRcts_rxni))-1,1) = abbRcts_rxni;
    listReactants(countR:(countR+numel(abbRcts_rxni))-1,2) = nameRcts_rxnj(idxHitsRcts);
    countR = countR+numel(abbRcts_rxni);
    
end
idxEmptyP = sum(cellfun(@isempty, listProducts),2) == size(listProducts,2);
listProducts(idxEmptyP,:) = '';

idxEmptyR = sum(cellfun(@isempty, listReactants),2) == size(listReactants,2);
listReactants(idxEmptyR,:) = '';


% check if product species belong to same class and act accordingly:
lmCodesP = unique(extractBetween(listProducts(:,2), '[', ']'), 'stable');
lmAbbrevP = unique(extractBetween(listProducts(:,2), '] ', '('), 'stable');

% sort out species according to class:
listClassesPdcts = '';
for i = 1:numel(lmCodesP)
    classID_i = lmAbbrevP{i};
    class_i = lmCodesP{i};
    idxClass_i = contains(listProducts(:,2), class_i);
    speciesClass_i = unique(listProducts(idxClass_i,1));
    listClassesPdcts.(classID_i) = speciesClass_i;
end


% check if reactant species belong to same class and act accordingly:
lmCodesR = unique(extractBetween(listReactants(:,2), '[', ']'), 'stable');
lmAbbrevR = unique(extractBetween(listReactants(:,2), '] ', '('), 'stable');

% sort out species according to class:
listClassesRcts = '';
for i = 1:numel(lmCodesR)
    classID_i = lmAbbrevR{i};
    class_i = lmCodesR{i};
    idxClass_i = contains(listReactants(:,2), class_i);
    speciesClass_i = unique(listReactants(idxClass_i,1));
    listClassesRcts.(classID_i) = speciesClass_i;
end



% then get flux sum for species whithin each products class:
nameClassesP = fieldnames(listClassesPdcts);
referenceFluxesPdcts = '';

for i = 1:numel(nameClassesP)
    class_i = nameClassesP{i};
    speciesClass_i = listClassesPdcts.(class_i);
    
    for j = 1:numel(speciesClass_i)
        species_k = speciesClass_i{j};

        % find index of each lipid species in model mets list:
        idxSpecies_k = strcmp(modelSamplingWT.mets,species_k);

        % get stoichiometric coefficients of rxns associated to each lipid species:
        sSpecies_k = full(modelSamplingWT.S(idxSpecies_k,:));

        % find reactions producing the lipid species_k:
        incomingRxns = sSpecies_k > 0;

        % get reference flux for incoming reactions:
        incomingFluxes = abs(pFBA_sol.v(incomingRxns));

        % save reactions and corresponding fluxes in struct:
        fieldName_j = strrep(species_k, '-', '_');
        fieldName_j = strrep(fieldName_j, '[', '_');
        fieldName_j = strrep(fieldName_j, ']', '');
        referenceFluxesPdcts.(class_i).(fieldName_j).speciesID = species_k;
        referenceFluxesPdcts.(class_i).(fieldName_j).idxSspecies = find(idxSpecies_k);
        referenceFluxesPdcts.(class_i).(fieldName_j).incomingRxns = modelSamplingWT.rxns(incomingRxns);
        referenceFluxesPdcts.(class_i).(fieldName_j).idxIncomingRxns = find(incomingRxns);
        referenceFluxesPdcts.(class_i).(fieldName_j).incomingFluxes = incomingFluxes;
    end
end

% now compute sum of incoming fluxes:
referenceFluxesPdcts = sumIncomingFluxes(referenceFluxesPdcts, 0);



% then get flux sum for species whithin each reactant class:
referenceFluxesRcts = '';
if ~isempty(listClassesRcts)
    nameClassesR = fieldnames(listClassesRcts);

    for i = 1:numel(nameClassesR)
        class_i = nameClassesR{i};
        speciesClass_i = listClassesRcts.(class_i);

        for j = 1:numel(speciesClass_i)
            species_k = speciesClass_i{j};

            % find index of each lipid species in model mets list:
            idxSpecies_k = strcmp(modelSamplingWT.mets,species_k);

            % get stoichiometric coefficients of rxns associated to each lipid species:
            sSpecies_k = full(modelSamplingWT.S(idxSpecies_k,:));

            % find reactions producing the lipid species_k:
            incomingRxns = sSpecies_k > 0;

            % get reference flux for incoming reactions:
            incomingFluxes = abs(pFBA_sol.v(incomingRxns));

            % save reactions and corresponding fluxes in struct:
            fieldName_j = strrep(species_k, '-', '_');
            fieldName_j = strrep(fieldName_j, '[', '_');
            fieldName_j = strrep(fieldName_j, ']', '');
            referenceFluxesRcts.(class_i).(fieldName_j).speciesID = species_k;
            referenceFluxesRcts.(class_i).(fieldName_j).idxSspecies = find(idxSpecies_k);
            referenceFluxesRcts.(class_i).(fieldName_j).incomingRxns = modelSamplingWT.rxns(incomingRxns);
            referenceFluxesRcts.(class_i).(fieldName_j).idxIncomingRxns = find(incomingRxns);
            referenceFluxesRcts.(class_i).(fieldName_j).incomingFluxes = incomingFluxes;
        end
    end
    
    % now compute sum of incoming fluxes:
    referenceFluxesRcts = sumIncomingFluxes(referenceFluxesRcts, 0);
end


% create struct to save results:
referenceFluxes.referenceFluxesP = referenceFluxesPdcts;
referenceFluxes.referenceFluxesR = referenceFluxesRcts;

end

